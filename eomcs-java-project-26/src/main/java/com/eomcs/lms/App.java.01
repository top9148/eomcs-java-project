package com.eomcs.lms;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;
import java.util.Stack;
import com.eomcs.lms.domain.Board;
import com.eomcs.lms.domain.Lesson;
import com.eomcs.lms.domain.Member;
import com.eomcs.lms.handler.BoardAddCommand;
import com.eomcs.lms.handler.BoardDeleteCommand;
import com.eomcs.lms.handler.BoardDetailCommand;
import com.eomcs.lms.handler.BoardListCommand;
import com.eomcs.lms.handler.BoardUpdateCommand;
import com.eomcs.lms.handler.LessonAddCommand;
import com.eomcs.lms.handler.LessonDeleteCommand;
import com.eomcs.lms.handler.LessonDetailCommand;
import com.eomcs.lms.handler.LessonListCommand;
import com.eomcs.lms.handler.LessonUpdateCommand;
import com.eomcs.lms.handler.MemberAddCommand;
import com.eomcs.lms.handler.MemberDeleteCommand;
import com.eomcs.lms.handler.MemberDetailCommand;
import com.eomcs.lms.handler.MemberListCommand;
import com.eomcs.lms.handler.MemberUpdateCommand;

public class App {

  static Scanner keyboard = new Scanner(System.in);
  static Stack<String> commandHistory = new Stack<>();
  static Queue<String> commandHistory2 = new LinkedList<>();
  
  public static void main(String[] args) {
    ArrayList<Lesson> lessonList = new ArrayList<>();
    LessonAddCommand lessonAddCommand = new LessonAddCommand(keyboard, lessonList);
    LessonListCommand lessonListCommand = new LessonListCommand(keyboard, lessonList);
    LessonDetailCommand lessonDetailCommand = new LessonDetailCommand(keyboard, lessonList);
    LessonUpdateCommand lessonUpdateCommand = new LessonUpdateCommand(keyboard, lessonList);
    LessonDeleteCommand lessonDeleteCommand = new LessonDeleteCommand(keyboard, lessonList);
    
    LinkedList<Member> memberList = new LinkedList<>();
    MemberAddCommand memberAddCommand = new MemberAddCommand(keyboard, memberList);
    MemberListCommand memberListCommand = new MemberListCommand(keyboard, memberList);
    MemberDetailCommand memberDetailCommand = new MemberDetailCommand(keyboard, memberList);
    MemberUpdateCommand memberUpdateCommand = new MemberUpdateCommand(keyboard, memberList);
    MemberDeleteCommand memberDeleteCommand = new MemberDeleteCommand(keyboard, memberList);
    
    ArrayList<Board> boardList = new ArrayList<>();
    BoardAddCommand boardAddCommand = new BoardAddCommand(keyboard, boardList);
    BoardListCommand boardListCommand = new BoardListCommand(keyboard, boardList);
    BoardDetailCommand boardDetailCommand = new BoardDetailCommand(keyboard, boardList);
    BoardUpdateCommand boardUpdateCommand = new BoardUpdateCommand(keyboard, boardList);
    BoardDeleteCommand boardDeleteCommand = new BoardDeleteCommand(keyboard, boardList);
    
    while (true) {
      String command = prompt();

      // 사용자가 입력한 명령을 스택에 보관한다.
      commandHistory.push(command);
      
      // 사용자가 입력한 명령을 큐에 보관한다.
      commandHistory2.offer(command);
      
      if (command.equals("/lesson/add")) {
        lessonAddCommand.execute();
        
      } else if (command.equals("/lesson/list")) {
        lessonListCommand.execute();
      
      } else if (command.equals("/lesson/detail")) {
        lessonDetailCommand.execute();
      
      } else if (command.equals("/lesson/update")) {
        lessonUpdateCommand.execute();
      
      } else if (command.equals("/lesson/delete")) {
        lessonDeleteCommand.execute();
      
      } else if (command.equals("/member/add")) {
        memberAddCommand.execute();
        
      } else if (command.equals("/member/list")) {
        memberListCommand.execute();
        
      } else if (command.equals("/member/detail")) {
        memberDetailCommand.execute();
      
      } else if (command.equals("/member/update")) {
        memberUpdateCommand.execute();
      
      } else if (command.equals("/member/delete")) {
        memberDeleteCommand.execute();
      
      } else if (command.equals("/board/add")) {
        boardAddCommand.execute();
        
      } else if (command.equals("/board/list")) {
        boardListCommand.execute();
        
      } else if (command.equals("/board/detail")) {
        boardDetailCommand.execute();
      
      } else if (command.equals("/board/update")) {
        boardUpdateCommand.execute();
      
      } else if (command.equals("/board/delete")) {
        boardDeleteCommand.execute();
      
      } else if (command.equals("quit")) {
        System.out.println("안녕!");
        break;
        
      } else if (command.equals("history")) {
        printCommandHistory();
        
      } else if (command.equals("history2")) {
        printCommandHistory2();
        
      } else {
        System.out.println("실행할 수 없는 명령입니다.");
      }
      
      System.out.println(); 
    }

    keyboard.close();
  }

  @SuppressWarnings("unchecked")
  private static void printCommandHistory() {
    Stack<String> temp = (Stack<String>) commandHistory.clone();
    
    while (temp.size() > 0) {
      System.out.println(temp.pop());
    }
  }
  
  @SuppressWarnings("unchecked")
  private static void printCommandHistory2() {
    Queue<String> temp = (Queue<String>) ((LinkedList<String>) commandHistory2).clone();
    
    while (temp.size() > 0) {
      System.out.println(temp.poll());
    }
  }

  private static String prompt() {
    System.out.print("명령> ");
    return keyboard.nextLine().toLowerCase();
  }
}
